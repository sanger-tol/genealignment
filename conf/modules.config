/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    //
    // SUBWORKFLOW: GENERATE GENOME
    //
    withName: ".*:GENERATE_GENOME:GNU_SORT" {
        ext.prefix      = { "${meta.id}_len_sorted" }
        ext.suffix      = { "genome" }
        ext.args        = { "-k2,2 -nr -S${task.memory.mega - 100}M -T ." }
    }


    //
    // SUBWORKFLOW: GENE ALIGNMENTS
    //
    withName: MINIPROT_ALIGN {
        ext.args        = " --gff -j1 -ut16 --gff-delim='#' --outc 0.5 --outs 0.9"
    }

    withName: ".*:.*:(GEN_ALIGNMENTS|RNA_ALIGNMENTS|CDS_ALIGNMENTS):MINIMAP2_ALIGN" {
        ext.args        = {"-x splice ${meta.intron_size ? "-G ${meta.intron_size}" : "" } ${reference.size() > 2.5e9 ? (" -I " + Math.ceil(reference.size()/1e9)+"G") : ""} "}
        ext.args2       = { "-T ${meta.id}_tmp" }
        ext.prefix      = { "${meta.id}_alignment_${reference.getName().tokenize(".")[0]}" }
    }

    withName: ".*:.*:(GEN_ALIGNMENTS|RNA_ALIGNMENTS|CDS_ALIGNMENTS):BEDTOOLS_BAMTOBED" {
        ext.args        = "-bed12"
    }

    withName: ".*:.*:.*:(GEN_ALIGNMENTS|RNA_ALIGNMENTS|CDS_ALIGNMENTS):UCSC_BEDTOBIGBED" {
        ext.prefix      = { "${meta.id}_${meta.type}" }
    }

    withName: ".*:.*:PEP_ALIGNMENTS:TABIX_BGZIPTABIX" {
        ext.prefix      = { "pep_${meta.id}" }
        ext.args2       = { "--csi" }
    }


    //
    // MODULE: BEDTOOLS SORT CONFIGS
    //
    withName: BEDTOOLS_SORT {
        ext.prefix      = { "${meta.id}.sorted" }
    }

    withName: '.*:.*:GEN_ALIGNMENTS:BEDTOOLS_SORT' {
        ext.prefix      = { "${meta.id}.gen.sorted" }
    }

    withName: '.*:.*:CDS_ALIGNMENTS:BEDTOOLS_SORT' {
        ext.prefix      = { "${meta.id}.cds.sorted" }
    }

    withName: '.*:.*:RNA_ALIGNMENTS:BEDTOOLS_SORT' {
        ext.prefix      = { "${meta.id}.rna.sorted" }
    }

    withName: ".*:.*:PEP_ALIGNMENTS:BEDTOOLS_SORT" {
        ext.prefix      = { "${meta.id}.prot.sorted" }
    }

}
